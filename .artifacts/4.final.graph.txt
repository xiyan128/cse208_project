 %0 = [[255] [  0]]                         # ClearTensor<uint8, shape=(2, 1)>
 %1 = 40                                    # ClearScalar<uint6>
 %2 = _input_0                              # EncryptedTensor<uint8, shape=(1, 2)>
 %3 = 1                                     # ClearScalar<uint1>
 %4 = add(%2, %3)                           # EncryptedTensor<uint9, shape=(1, 2)>
 %5 = subgraph(%4)                          # EncryptedTensor<uint8, shape=(1, 2)>
 %6 = matmul(%5, %0)                        # EncryptedTensor<uint16, shape=(1, 1)>
 %7 = sum(%5, axis=1, keepdims=True)        # EncryptedTensor<uint9, shape=(1, 1)>
 %8 = multiply(%1, %7)                      # EncryptedTensor<uint15, shape=(1, 1)>
 %9 = add(%6, %8)                           # EncryptedTensor<uint17, shape=(1, 1)>
%10 = subgraph(%9)                          # EncryptedTensor<uint8, shape=(1, 1)>
return %10

Subgraphs:

    %5 = subgraph(%4):

         %0 = 0                              # ClearScalar<uint1>
         %1 = 255                            # ClearScalar<uint8>
         %2 = -1                             # ClearScalar<int1>
         %3 = 0.0038484894881447643          # ClearScalar<float64>
         %4 = 0.0038484894881447643          # ClearScalar<float64>
         %5 = input                          # EncryptedTensor<uint2, shape=(1, 2)>
         %6 = multiply(%4, %5)               # EncryptedTensor<float64, shape=(1, 2)>
         %7 = true_divide(%6, %3)            # EncryptedTensor<float64, shape=(1, 2)>
         %8 = add(%7, %2)                    # EncryptedTensor<float64, shape=(1, 2)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 2)>
        %10 = clip(%9, %0, %1)               # EncryptedTensor<float64, shape=(1, 2)>
        %11 = astype(%10, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 2)>
        return %11

    %10 = subgraph(%9):

         %0 = 0                                 # ClearScalar<uint1>
         %1 = 255                               # ClearScalar<uint8>
         %2 = -23                               # ClearScalar<int6>
         %3 = 0.0026415093086641184             # ClearScalar<float64>
         %4 = 1.0                               # ClearScalar<float64>
         %5 = 1.0                               # ClearScalar<float64>
         %6 = [-2.8879607]                      # ClearTensor<float32, shape=(1,)>
         %7 = 4.73919145867945e-05              # ClearScalar<float64>
         %8 = [[255]]                           # ClearTensor<uint8, shape=(1, 1)>
         %9 = 80                                # ClearScalar<uint7>
        %10 = input                             # EncryptedTensor<uint2, shape=(1, 1)>
        %11 = astype(%10, dtype=float32)        # EncryptedTensor<float32, shape=(1, 1)>
        %12 = add(%11, %9)                      # EncryptedTensor<float32, shape=(1, 1)>
        %13 = add(%12, %8)                      # EncryptedTensor<float64, shape=(1, 1)>
        %14 = multiply(%7, %13)                 # EncryptedTensor<float64, shape=(1, 1)>
        %15 = add(%14, %6)                      # EncryptedTensor<float64, shape=(1, 1)>
        %16 = negative(%15)                     # EncryptedTensor<float64, shape=(1, 1)>
        %17 = exp(%16)                          # EncryptedTensor<float64, shape=(1, 1)>
        %18 = add(%5, %17)                      # EncryptedTensor<float64, shape=(1, 1)>
        %19 = true_divide(%4, %18)              # EncryptedTensor<float64, shape=(1, 1)>
        %20 = true_divide(%19, %3)              # EncryptedTensor<float64, shape=(1, 1)>
        %21 = add(%20, %2)                      # EncryptedTensor<float64, shape=(1, 1)>
        %22 = rint(%21)                         # EncryptedTensor<float64, shape=(1, 1)>
        %23 = clip(%22, %0, %1)                 # EncryptedTensor<float64, shape=(1, 1)>
        %24 = astype(%23, dtype=int_)           # EncryptedTensor<uint1, shape=(1, 1)>
        return %24
